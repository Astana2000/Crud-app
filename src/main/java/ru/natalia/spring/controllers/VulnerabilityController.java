package ru.natalia.spring.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.*;
import ru.natalia.spring.binders.WorkaroundPropertyEditor;
import ru.natalia.spring.dao.VulnerabilityDAO;
import ru.natalia.spring.models.ProjectWorkaround;
import ru.natalia.spring.models.Vulnerability;
import ru.natalia.spring.models.VulnerabilityType;
import ru.natalia.spring.models.Workaround;

import javax.validation.Valid;
import java.util.List;

@Controller
@RequestMapping("/vulnerabilities")
public class VulnerabilityController {

    @Autowired
    private VulnerabilityDAO vulnerabilityDAO;
    @GetMapping()
    public String index(Model model){
        model.addAttribute("vulnerabilities",vulnerabilityDAO.index());
        return "vulnerabilities/index";
    }
    @GetMapping("/{id}")
    public String show(@PathVariable("id") int id,
                       Model model) {
        model.addAttribute("vulnerability", vulnerabilityDAO.show(id));
        return "vulnerabilities/show";
    }
    @GetMapping("/new")
    public String newProject(@ModelAttribute("vulnerability") Vulnerability vulnerability, Model model) {
        List<Workaround> workarounds = vulnerabilityDAO.findAllWorkarounds();
        model.addAttribute("workarounds", workarounds);
        List<VulnerabilityType> typeList = vulnerabilityDAO.findAllVulnerabilityTypes();
        model.addAttribute("vulnerabilityTypes", typeList);
        return "vulnerabilities/new";
    }
    @PostMapping()
    public String create(@ModelAttribute("vulnerability") @Valid Vulnerability vulnerability,
                         BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            return "vulnerabilities/new";
        }
        vulnerabilityDAO.save(vulnerability);
        return "redirect:/vulnerabilities";
    }
    @GetMapping("/{id}/edit")
    public String edit(Model model, @PathVariable("id") int id) {
        model.addAttribute("vulnerabilities", vulnerabilityDAO.show(id));
        List<Workaround> workarounds = vulnerabilityDAO.findAllWorkarounds();
        model.addAttribute("workarounds", workarounds);
        List<VulnerabilityType> typeList = vulnerabilityDAO.findAllVulnerabilityTypes();
        model.addAttribute("vulnerabilityTypes", typeList);
        return "vulnerabilities/edit";
    }
    @PatchMapping("/{id}")
    public String update(@ModelAttribute("vulnerability") @Valid Vulnerability vulnerability,
                         BindingResult bindingResult,
                         @PathVariable("id") int id) {
        if (bindingResult.hasErrors()) {
            return "vulnerabilities/edit";
        }
        vulnerabilityDAO.update(id, vulnerability);
        return "redirect:/vulnerabilities";
    }
    @DeleteMapping("/{id}")
    public String delete(@PathVariable("id") int id) {
        vulnerabilityDAO.delete(id);
        return "redirect:/vulnerabilities";
    }
    @InitBinder
    public void initBinderAll(WebDataBinder binder)
    {
        //binder.registerCustomEditor(Workaround.class,  new WorkaroundPropertyEditor(vulnerabilityDAO));
        //binder.registerCustomEditor(VulnerabilityType.class,  new VulnerabilityTypePropertyEditor(vulnerabilityDAO));
    }
}
